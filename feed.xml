<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-23T23:49:48+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lizhenyu’s blog</title><subtitle>Even the smallest person can change the course of future.</subtitle><entry><title type="html">JS 中的模块</title><link href="http://localhost:4000/2022/07/23/%E5%85%B3%E4%BA%8EJS%E6%A8%A1%E5%9D%97.html" rel="alternate" type="text/html" title="JS 中的模块" /><published>2022-07-23T00:00:00+08:00</published><updated>2022-07-23T00:00:00+08:00</updated><id>http://localhost:4000/2022/07/23/%E5%85%B3%E4%BA%8EJS%E6%A8%A1%E5%9D%97</id><content type="html" xml:base="http://localhost:4000/2022/07/23/%E5%85%B3%E4%BA%8EJS%E6%A8%A1%E5%9D%97.html"><![CDATA[<h1 id="js-中的模块">JS 中的模块</h1>

<h2 id="背景">背景</h2>

<p>现代 JavaScript 开发毋庸置疑会遇到代码量大和广泛使用第三方库的问题。解决这个问题的方案通 常需要把代码拆分成很多部分，然后再通过某种方式将它们连接起来。</p>

<p><strong>在 ECMAScript 6 模块规范出现之前，虽然浏览器原生不支持模块的行为，但迫切需要这样的行为</strong>。 ECMAScript 同样不支持模块，因此希望使用模块模式的库或代码库必须基于 JavaScript 的语法和词法特 性“伪造”出类似模块的行为。</p>

<p>因为 JavaScript 是异步加载的解释型语言，所以得到广泛应用的各种模块实现也表现出不同的形态。 这些不同的形态决定了不同的结果，但最终它们都实现了经典的模块模式</p>

<h2 id="理解模块模式">理解模块模式</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模块系统的基本思想：逻辑分块，各自封装，相互独立，每个模块自行决定对外暴露什么，同时自行决定引入执行那些外部代码
</code></pre></div></div>

<p>将代码拆分成独立的块，然后再把这些块连接起来可以通过模块模式来实现。这种模式背后的思想 很简单:把逻辑分块，各自封装，相互独立，每个块自行决定对外暴露什么，同时自行决定引入执行哪 些外部代码。不同的实现和特性让这些基本的概念变得有点复杂，但这个基本的思想是所有 JavaScript 模块系统的基础</p>

<h3 id="1-模块标识符">1. 模块标识符</h3>

<p>模块标识符是所有模块系统通用的概念。模块系统本质上是键/值实体，其中每个模块都有个可用 于引用它的标识符。</p>

<p>这个标识符在模拟模块的系统中可能是字符串，在原生实现的模块系统中可能是模 块文件的实际路径</p>

<p>将模块标识符解析为实际模块的过程要根据模块系统对标识符的实现。原生浏览器模块标识符必须 提供实际 JavaScript 文件的路径。</p>

<p>除了文件路径，Node.js 还会搜索 node_modules 目录，用标识符去匹配 包含 index.js 的目录</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>原来如此 Node.js 会自动区搜索 node_modules 目录用标识符区匹配包含index.js的目录呀 ✅
</code></pre></div></div>

<h3 id="2-模块依赖">2. 模块依赖</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模块系统的核心是管理依赖。
</code></pre></div></div>

<p>指定依赖的模块与周围的环境会达成一种契约。本地模块向模块系统 声明一组外部模块(依赖)，这些外部模块对于当前模块正常运行是必需的。模块系统检视这些依赖， 进而保证这些外部模块能够被加载并在本地模块运行时初始化所有依赖。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>每个模块都会与某个唯一的标识符关联，该标识符可用于检索模块。
</code></pre></div></div>

<p>这个标识符通常是 JavaScript 文件的路径，但在某些模块系统中，这个标识符也可以是在模块本身内部声明的命名空间路径字符串</p>

<h3 id="3-模块加载">3. 模块加载</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>加载模块的概念派生自依赖契约。当一个外部模块被指定为依赖时，本地模块期望在执行它时，依赖已准备好并已初始化
</code></pre></div></div>

<p>在浏览器中，加载模块涉及几个步骤。加载模块涉及执行其中的代码，但必须是在所有依赖都加载 并执行之后。如果浏览器没有收到依赖模块的代码，则必须发送请求并等待网络返回。</p>

<p>收到模块代码之后，浏览器必须确定刚收到的模块是否也有依赖。然后递归地评估并加载所有依赖，直到所有依赖模块 都加载完成。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>只有整个依赖图都加载完成，才可以执行入口模块。
</code></pre></div></div>

<h3 id="4-入口">4. 入口</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>相互依赖的模块必须指定一个模块作为入口(entry point)，这也是代码执行的起点
</code></pre></div></div>

<h4 id="为什么需要js模块入口文件">为什么需要JS模块入口文件？</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>因为 JavaScript 是顺序执行的，并且是单线程的，所以代码必须有执行的起点。
</code></pre></div></div>

<p>入口模块也可能依 赖其他模块，其他模块同样可能有自己的依赖。于是模块化 JavaScript 应用程序的所有模块会构成依赖 图。</p>

<p><img src="https://cdn.jsdelivr.net/gh/lzy940610/assets/img/20220723190445.png" alt="" /></p>

<p>图中的箭头表示依赖方向:模块 A 依赖模块 B 和模块 C，模块 B 依赖模块 D 和模块 E，模块 C 依 赖模块 E。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>因为模块必须在依赖加载完成后才能被加载，所以这个应用程序的入口模块 A 必须在应用程序的其他部分加载后才能执行
</code></pre></div></div>

<p>在 JavaScript 中，“加载”的概念可以有多种实现方式。</p>

<p>因为模块是作为包含将立即执行的 JavaScript 代码的文件实现的，所以一种可能是按照依赖图的要求依次请求各个脚本</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>

<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

<span class="nt">&lt;head&gt;</span>

	<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
	
	<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
	
	<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
	
	<span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>

<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
	<span class="c">&lt;!-- 这样的JS请求顺序才能满足入口应用A的执行 --&gt;</span> 
	<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"moduleE.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"moduleD.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"moduleC.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"moduleB.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    
	<span class="c">&lt;!-- 因为模块必须在依赖加载完成后才能被加载 所以必须等模块 B、C、D、E都加载完毕才能执行模块自身代码 --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"moduleA.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模块加载是“阻塞的”，这意味着前置操作必须完成才能执行后续操作。
</code></pre></div></div>

<p>每个模块在自己的代码到达 浏览器之后完成加载，此时其依赖已经加载并初始化。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>不过，这个策略存在一些性能和复杂性问题。
</code></pre></div></div>

<p>为 一个应用程序而按顺序加载五个 JavaScript 文件并不理想，并且手动管理正确的加载顺序也颇为棘手。</p>

<h3 id="5-异步依赖">5. 异步依赖</h3>

<p>因为 JavaScript 可以异步执行，所以如果能按需加载就好了。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>换句话说，可以让 JavaScript 通知模块 系统在必要时加载新模块，并在模块加载完成后提供回调。
</code></pre></div></div>

<p>在代码层面，可以通过下面的伪代码来实现:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 在模块A里面 </span>
<span class="nx">load</span><span class="p">(</span><span class="dl">'</span><span class="s1">moduleB</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">moduleB</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// so stuff 做东西</span>
    <span class="nx">moduleB</span><span class="p">.</span><span class="nx">doStuff</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>如果重写前面的应用程序，只使用动态模块加载，那么使用一个script标签即可完成模块 A 的 加载。</p>

<p>模块 A 会按需请求模块文件，而不会生成必需的依赖列表。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>异步依赖这样有几个好处，其中之一就是性能， 因为在页面加载时只需同步加载一个文件
</code></pre></div></div>

<p>这些脚本也可以分离出来，比如给script标签应用 defer 或 async 属性，再加上能够识别异步脚本何时加载和初始化的逻辑</p>

<p>此行为将模拟在 ES6 模块规范中实现的行为</p>

<h3 id="动态依赖">动态依赖</h3>

<p>有些模块系统要求开发者在模块开始列出所有依赖，而有些模块系统则允许开发者在程序结构中动 态添加依赖。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>动态添加的依赖有别于模块开头列出的常规依赖，这些依赖必须在模块执行前加载完毕
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 下面是动态依赖加载的例子:</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">loadCondition</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleA</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个模块中，是否加载 moduleA 是运行时确定的。</p>

<p>加载 moduleA 时可能是阻塞的，也可能导致 执行，且只有模块加载后才会继续。</p>

<p>无论怎样，模块内部的代码在 moduleA 加载前都不能执行，因为 moduleA 的存在是后续模块行为正确的关键。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>动态依赖可以支持更复杂的依赖关系，但代价是增加了对模块进行静态分析的难度


Note：运行时动态添加一些模块是阻塞的 可能会导致JS程序break，慎重使用
实际运行时webpack会将moduleA打包进入，增加包体积，包括像一些多端框架，应该会有各自的运行时代码库，如果是运行时的话包会很大，所以提供了编译时的方案，在编译过程中打包特定平台的结果，可以使用动态异步依赖和编译时解决这个问题
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">load</span><span class="p">(</span><span class="dl">'</span><span class="s1">moduleB</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">moduleB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
			<span class="nx">moduleA</span><span class="p">.</span><span class="nx">doStuff</span><span class="p">();</span>
		<span class="p">});</span>
	<span class="p">}</span>
<span class="p">}());</span>
</code></pre></div></div>

<h3 id="7--静态分析">7.  静态分析</h3>

<p>模块中包含的发送到浏览器的 JavaScript 代码经常会被静态分析，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>静态分析工具会检查代码结构并在不实际执行代码的情况下推断其行为。

Note：tree sharking 就是依赖ES6 module规范可以将未使用的依赖在编译时剔除掉，而动态依赖的 CJS 模块则无法使用此能力导致会打包一些无用代码
</code></pre></div></div>

<p>对静态分析友好的模块系统可以让模块打包系统更容易将代码处理 为较少的文件。它还将支持在智能编辑器里智能自动完成。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>更复杂的模块行为，例如动态依赖，会导致静态分析更困难。
</code></pre></div></div>

<p>不同的模块系统和模块加载器具有不 同层次的复杂度。</p>

<p>至于模块的依赖，额外的复杂度会导致相关工具更难预测模块在执行时到底需要哪些 依赖</p>

<h3 id="8-循环依赖">8. 循环依赖</h3>

<p>要构建一个没有循环依赖的 JavaScript 应用程序几乎是不可能的，因此包括 CommonJS、AMD 和 ES6 在内的所有模块系统都支持循环依赖。</p>

<p>在包含循环依赖的应用程序中，模块加载顺序可能会出人意 料。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>不过，只要恰当地封装模块，使它们没有副作用，加载顺序就应该不会影响应用程序的运行。
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleD</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleB</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">moduleA</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleA</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleC</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">moduleB</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleD</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">moduleC</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleA</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./moduleC</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">moduleD</span><span class="dl">'</span><span class="p">);</span>


</code></pre></div></div>

<p>转换为依赖图：除了moduleB 其他模块 都循环依赖了至少一次 ♻️</p>

<ul>
  <li>moduleA
    <ul>
      <li>moduleD
        <ul>
          <li>moduleA ♻️</li>
          <li>moduleC
            <ul>
              <li>moduleD
                <ul>
                  <li>moduleA</li>
                  <li>moduleC ♻️</li>
                </ul>
              </li>
              <li>moduleB</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>moduleB
        <ul>
          <li>moduleA  ♻️</li>
          <li>moduleC
            <ul>
              <li>moduleD ♻️
                <ul>
                  <li>moduleA ♻️</li>
                  <li>moduleC</li>
                </ul>
              </li>
              <li>moduleB</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>修改主模块中用到的模块会改变依赖加载顺序。如果 moduleA 最先加载，则会打印如下输出，这 表示模块加载完成时的绝对顺序:</p>

<p>moduleB 
moduleC<br />
moduleD<br />
moduleA</p>

<p>以上模块加载顺序可以用图 26-2 的依赖图来表示，其中加载器会执行深度优先的依赖加载:</p>

<p>如果 moduleC 最先加载，则会打印如下输出，这表示模块加载的绝对顺序:</p>

<p>moduleD
moduleA
moduleB
moduleC</p>

<p>以上模块加载顺序可以通过图 26-3 的依赖图来表示，其中加载器会执行深度优先的依赖加载</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模块加载器算法：深度优先遍历加载依赖
</code></pre></div></div>

<p><img src="https://cdn.jsdelivr.net/gh/lzy940610/assets/img/20220723211202.png" alt="" /></p>

<p>简单的模块递归查找实现</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


</code></pre></div></div>

<p>![[Pasted image 20220723230213.png]]</p>

<h2 id="凑合的模块系统">凑合的模块系统</h2>]]></content><author><name></name></author><summary type="html"><![CDATA[JS 中的模块]]></summary></entry><entry><title type="html">2022 选择阅读的书籍</title><link href="http://localhost:4000/2022/07/19/%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E5%8D%95.html" rel="alternate" type="text/html" title="2022 选择阅读的书籍" /><published>2022-07-19T00:00:00+08:00</published><updated>2022-07-19T00:00:00+08:00</updated><id>http://localhost:4000/2022/07/19/%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E5%8D%95</id><content type="html" xml:base="http://localhost:4000/2022/07/19/%E9%9D%9E%E6%8A%80%E6%9C%AF%E7%B1%BB%E4%B9%A6%E5%8D%95.html"><![CDATA[<h2 id="2022-选择阅读的书籍">2022 选择阅读的书籍</h2>

<h3 id="原则不贪多-不同领域的一本经典即可">原则：不贪多 不同领域的一本经典即可</h3>

<p>一年12本左右即可 平均每月一本 碎片化时间阅读</p>

<ul>
  <li>非虚构类
    <ul>
      <li>心理学
        <ul>
          <li>《影响力》✅</li>
        </ul>
      </li>
      <li>大格局
        <ul>
          <li>《气候经济与人类未来》✅</li>
        </ul>
      </li>
      <li>创业财富
        <ul>
          <li>《黑客与画家》✅</li>
          <li>《穷查理宝典》✅</li>
        </ul>
      </li>
      <li>行为学
        <ul>
          <li>《怪诞行为学》一、二册 ✅</li>
        </ul>
      </li>
      <li>好奇心
        <ul>
          <li>《万物发明指南》✅</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>虚构类
    <ul>
      <li>《围城》✅</li>
      <li>《呐喊》❌ 好像版本有点问题 z-lib 10次下载机会没了额。。。</li>
      <li>《仿生人会梦见电子羊吗？》✅</li>
      <li>《许三观卖血记》✅</li>
      <li>《三体》✅</li>
    </ul>
  </li>
</ul>

<h3 id="从哪里获取书籍">从哪里获取书籍？</h3>

<ul>
  <li><a href="https://en.z-lib.org">z-lib</a> 下载免费的电子书版
    <ul>
      <li>优点：基本上都能搜索到下载 提供各种格式的下载 如：epub、pdf等</li>
      <li>缺点：一些比较冷门的书籍 会有一些奇奇怪怪的资源 参杂一些广告</li>
      <li>适用：快速概览、通读一本书</li>
    </ul>
  </li>
  <li>kindle购买
    <ul>
      <li>优点：结合 kindle 排版和阅读体验都会比较好</li>
      <li>缺点：跟kindle强绑定 对文本进行了加密 不像PDF格式易于传播</li>
      <li>适用：追求体验与正版资源</li>
    </ul>
  </li>
  <li>电商平台购买实体书 如：当当、JD等
    <ul>
      <li>优点：优于前面二者</li>
      <li>缺点：不便于携带</li>
      <li>适用：工具类、查询类书本 如：计算机原理、代码大全等技术、工具类书籍</li>
    </ul>
  </li>
</ul>

<h3 id="用什么读">用什么读？</h3>

<ul>
  <li>设备自带的阅读器：方面快捷 不需要安装冗余App 有源文件就可以立马开启阅读
    <ul>
      <li>IOS 推荐 ✅
        <ul>
          <li>Books：需要 epub 格式书本 iCloud可以同步</li>
          <li>Preview：PDF即可 打开</li>
        </ul>
      </li>
      <li>Android：华米OV厂商自带的</li>
    </ul>
  </li>
  <li>阅读器软件
    <ul>
      <li>微信读书 - 分享与存储比较方便</li>
      <li>Amazon Kindle - 需要购买kindle的正版数据 补充没有 Kindle阅读器的尴尬</li>
    </ul>
  </li>
  <li>专业的阅读器设备
    <ul>
      <li>Kindle阅读器： 有钱有时间有阅读环境可以冲！</li>
      <li>华米OV出品的一些专业阅读器</li>
    </ul>
  </li>
</ul>

<h3 id="什么时候读">什么时候读？</h3>

<p>碎片化的时间去阅读 比如：饭前、饭后的摸鱼时间 睡觉前等</p>

<ul>
  <li>工作日 🧱 - 非技术类书籍
    <ul>
      <li>三餐就餐期间：零碎时间 加起来 30mins差不多有</li>
      <li>睡前阅读：静心 + 助眠</li>
    </ul>
  </li>
  <li>休息日 ♨️ - 技术类书籍
    <ul>
      <li>整块时间 阅读专业的技术类书籍 如：《代码大全》等需要思考与练习的</li>
    </ul>
  </li>
</ul>

<h4 id="怎么做阅读笔记">怎么做阅读笔记？</h4>

<ul>
  <li>如果是 epub 或者 pdf 格式的书籍源文件 就可以好好直接适用相应的阅读器的备注功能即可
    <ul>
      <li>Books</li>
      <li>Preview</li>
    </ul>
  </li>
</ul>

<h3 id="书籍清单汇总">书籍清单汇总</h3>
<ul>
  <li>非虚构类
    <ul>
      <li>《事实》</li>
      <li>《一生的旅途》</li>
      <li>《美国陷阱》</li>
      <li>《性学入门》</li>
      <li>《气候经济与人类未来》</li>
      <li>《黑客与画家》</li>
      <li>《贪婪的多巴胺》</li>
      <li>《刘擎西方现代思想讲义》</li>
      <li>《冷血》</li>
      <li>《江城》</li>
      <li>《桶川跟踪狂杀人案》</li>
    </ul>
  </li>
  <li>虚构类
    <ul>
      <li>《人鼠之间》</li>
      <li>《没有人给他写信的上校》</li>
      <li>《太阳照常升起》</li>
      <li>《远山淡影》</li>
      <li>《莫失莫忘》</li>
      <li>《醉步男》</li>
      <li>《潮骚》</li>
      <li>《许三观卖血记》</li>
      <li>《兄弟》</li>
      <li>《伊凡伊里奇之死》</li>
      <li>《癌症楼》</li>
      <li>《呐喊》</li>
    </ul>
  </li>
  <li>好奇心
    <ul>
      <li>《塑造世界经济的五十项伟大发明》</li>
      <li>《我们如何走到今天》</li>
      <li>《万物发明指南》</li>
    </ul>
  </li>
  <li>心理学
    <ul>
      <li>《影响力》</li>
    </ul>
  </li>
  <li>经济学
    <ul>
      <li>《怪诞行为学》（只推荐第一、第二册）</li>
      <li>《思考：快与慢》- 丹尼尔卡尔曼</li>
      <li>《经济学原理》</li>
    </ul>
  </li>
  <li>财富
    <ul>
      <li>《小狗钱钱》</li>
      <li>《穷查理宝典》</li>
    </ul>
  </li>
  <li>文学类
    <ul>
      <li>推理小说
        <ul>
          <li>东野圭吾
            <ul>
              <li>《恶意》</li>
              <li>《嫌疑人X的献身》</li>
              <li>《白夜行》</li>
              <li>《解忧杂货铺》</li>
            </ul>
          </li>
          <li>阿加莎克里斯蒂
            <ul>
              <li>《罗杰疑案》</li>
              <li>《无人生还》</li>
              <li>《东方快车谋杀案》</li>
            </ul>
          </li>
          <li>岛田庄司
            <ul>
              <li>《占星术杀人魔法》</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>科幻小说
        <ul>
          <li>《三体》</li>
          <li>《仿生人会梦见电子羊吗？》</li>
        </ul>
      </li>
      <li>严肃文学
        <ul>
          <li>钱钟书
            <ul>
              <li>《围城》</li>
            </ul>
          </li>
          <li>余华
            <ul>
              <li>《活着》</li>
            </ul>
          </li>
          <li>莫言
            <ul>
              <li>《生死疲劳》</li>
            </ul>
          </li>
          <li>阎连科（预言：诺贝尔文学候选人）
            <ul>
              <li>《生死晶黄》</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>文学作品
        <ul>
          <li>芥川龙之介
            <ul>
              <li>《竹林中》</li>
              <li>《罗生门》</li>
            </ul>
          </li>
          <li>乔治奥威尔
            <ul>
              <li>《动物农场》</li>
            </ul>
          </li>
          <li>卡尔维诺
            <ul>
              <li>《树上的男爵》</li>
            </ul>
          </li>
          <li>茨威格
            <ul>
              <li>《一个女人一生中的二十四小时》</li>
            </ul>
          </li>
          <li>卡夫卡
            <ul>
              <li>《变形记》</li>
              <li>《城堡》</li>
            </ul>
          </li>
          <li>海明威
            <ul>
              <li>《老人与海》</li>
            </ul>
          </li>
          <li>《唐吉訶德》</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[2022 选择阅读的书籍]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/2022/05/17/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-05-17T00:00:00+08:00</published><updated>2022-05-17T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/17/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2022/05/17/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>